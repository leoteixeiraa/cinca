import { Observable } from 'rxjs';
import { Injectable, NgModule, Component, ViewChild, Renderer, Input, Output, EventEmitter, ChangeDetectorRef, forwardRef, HostListener, defineInjectable, inject } from '@angular/core';
import { HttpClient, HttpRequest, HttpEventType, HttpResponse, HttpHeaders, HttpClientModule } from '@angular/common/http';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import Cropper from 'cropperjs';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {number} */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common/http';
import * as ɵngcc2 from '@angular/common';

const _c0 = ["imageElement"];
const _c1 = ["fileInput"];
const _c2 = ["dragOverlay"];
function ImageUploaderComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r860 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵelementStart(1, "button", 10);
    ɵngcc0.ɵɵlistener("click", function ImageUploaderComponent_div_2_Template_button_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r860); const ctx_r859 = ɵngcc0.ɵɵnextContext(); return ctx_r859.onImageClicked(); });
    ɵngcc0.ɵɵelementStart(2, "div");
    ɵngcc0.ɵɵelementStart(3, "p", 11);
    ɵngcc0.ɵɵtext(4, "+");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "p");
    ɵngcc0.ɵɵtext(6, "Click here to add image");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "p");
    ɵngcc0.ɵɵtext(8, "Or drop image here");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function ImageUploaderComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    const _r863 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 12);
    ɵngcc0.ɵɵelement(1, "img", 13, 14);
    ɵngcc0.ɵɵelementStart(3, "button", 15);
    ɵngcc0.ɵɵlistener("click", function ImageUploaderComponent_div_3_Template_button_click_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r863); const ctx_r862 = ɵngcc0.ɵɵnextContext(); return ctx_r862.removeImage(); });
    ɵngcc0.ɵɵtext(4, "\u00D7");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r852 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("src", ctx_r852.imageThumbnail, ɵngcc0.ɵɵsanitizeUrl);
} }
function ImageUploaderComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    const _r866 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 12);
    ɵngcc0.ɵɵelement(1, "img", 13, 14);
    ɵngcc0.ɵɵelementStart(3, "button", 15);
    ɵngcc0.ɵɵlistener("click", function ImageUploaderComponent_div_4_Template_button_click_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r866); const ctx_r865 = ɵngcc0.ɵɵnextContext(); return ctx_r865.removeImage(); });
    ɵngcc0.ɵɵtext(4, "\u00D7");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r853 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("src", ctx_r853.imageThumbnail, ɵngcc0.ɵɵsanitizeUrl);
} }
function ImageUploaderComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    const _r868 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "img", 16);
    ɵngcc0.ɵɵlistener("click", function ImageUploaderComponent_div_5_Template_img_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r868); const ctx_r867 = ɵngcc0.ɵɵnextContext(); return ctx_r867.onImageClicked(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "div", 17);
    ɵngcc0.ɵɵelement(3, "div", 18);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r854 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵattribute("src", ctx_r854.imageThumbnail ? ctx_r854.imageThumbnail : null, ɵngcc0.ɵɵsanitizeUrl);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵstyleProp("width", ctx_r854.progress + "%");
} }
function ImageUploaderComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵelementStart(1, "div", 19);
    ɵngcc0.ɵɵelement(2, "div", 20);
    ɵngcc0.ɵɵelement(3, "div", 21);
    ɵngcc0.ɵɵelement(4, "div", 22);
    ɵngcc0.ɵɵelement(5, "div", 23);
    ɵngcc0.ɵɵelement(6, "div", 24);
    ɵngcc0.ɵɵelement(7, "div", 25);
    ɵngcc0.ɵɵelement(8, "div", 26);
    ɵngcc0.ɵɵelement(9, "div", 27);
    ɵngcc0.ɵɵelement(10, "div", 28);
    ɵngcc0.ɵɵelement(11, "div", 29);
    ɵngcc0.ɵɵelement(12, "div", 30);
    ɵngcc0.ɵɵelement(13, "div", 31);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function ImageUploaderComponent_div_7_Template(rf, ctx) { if (rf & 1) {
    const _r870 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵelementStart(1, "div", 32);
    ɵngcc0.ɵɵelementStart(2, "div", 33);
    ɵngcc0.ɵɵelementStart(3, "p");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "button", 15);
    ɵngcc0.ɵɵlistener("click", function ImageUploaderComponent_div_7_Template_button_click_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r870); const ctx_r869 = ɵngcc0.ɵɵnextContext(); return ctx_r869.dismissError(); });
    ɵngcc0.ɵɵtext(6, "\u00D7");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r856 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ctx_r856.errorMessage);
} }
const FileQueueStatus = {
    Pending: 0,
    Success: 1,
    Error: 2,
    Progress: 3,
};
FileQueueStatus[FileQueueStatus.Pending] = "Pending";
FileQueueStatus[FileQueueStatus.Success] = "Success";
FileQueueStatus[FileQueueStatus.Error] = "Error";
FileQueueStatus[FileQueueStatus.Progress] = "Progress";

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FileQueueObject {
    /**
     * @param {?} file
     */
    constructor(file) {
        this.status = FileQueueStatus.Pending;
        this.progress = 0;
        this.request = null;
        this.response = null;
        this.isPending = () => this.status === FileQueueStatus.Pending;
        this.isSuccess = () => this.status === FileQueueStatus.Success;
        this.isError = () => this.status === FileQueueStatus.Error;
        this.inProgress = () => this.status === FileQueueStatus.Progress;
        this.isUploadable = () => this.status === FileQueueStatus.Pending || this.status === FileQueueStatus.Error;
        this.file = file;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ImageUploaderService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} file
     * @param {?} options
     * @param {?=} cropOptions
     * @return {?}
     */
    uploadFile(file, options, cropOptions) {
        this.setDefaults(options);
        const /** @type {?} */ form = new FormData();
        form.append(options.fieldName, file, file.name);
        if (cropOptions) {
            form.append('X', cropOptions.x.toString());
            form.append('Y', cropOptions.y.toString());
            form.append('Width', cropOptions.width.toString());
            form.append('Height', cropOptions.height.toString());
        }
        // upload file and report progress
        const /** @type {?} */ req = new HttpRequest('POST', options.uploadUrl, form, {
            reportProgress: true,
            withCredentials: options.withCredentials,
            headers: this._buildHeaders(options)
        });
        return Observable.create(obs => {
            const /** @type {?} */ queueObj = new FileQueueObject(file);
            queueObj.request = this.http.request(req).subscribe((event) => {
                if (event.type === HttpEventType.UploadProgress) {
                    this._uploadProgress(queueObj, event);
                    obs.next(queueObj);
                }
                else if (event instanceof HttpResponse) {
                    this._uploadComplete(queueObj, event);
                    obs.next(queueObj);
                    obs.complete();
                }
            }, (err) => {
                if (err.error instanceof Error) {
                    // A client-side or network error occurred. Handle it accordingly.
                    this._uploadFailed(queueObj, err);
                    obs.next(queueObj);
                    obs.complete();
                }
                else {
                    // The backend returned an unsuccessful response code.
                    this._uploadFailed(queueObj, err);
                    obs.next(queueObj);
                    obs.complete();
                }
            });
        });
    }
    /**
     * @param {?} url
     * @param {?} options
     * @return {?}
     */
    getFile(url, options) {
        return Observable.create((observer) => {
            let /** @type {?} */ headers = new HttpHeaders();
            if (options.authToken) {
                headers = headers.append('Authorization', `${options.authTokenPrefix} ${options.authToken}`);
            }
            this.http.get(url, { responseType: 'blob', headers: headers }).subscribe(res => {
                const /** @type {?} */ file = new File([res], 'filename', { type: res.type });
                observer.next(file);
                observer.complete();
            }, err => {
                observer.error(err.status);
                observer.complete();
            });
        });
    }
    /**
     * @param {?} options
     * @return {?}
     */
    _buildHeaders(options) {
        let /** @type {?} */ headers = new HttpHeaders();
        if (options.authToken) {
            headers = headers.append('Authorization', `${options.authTokenPrefix} ${options.authToken}`);
        }
        if (options.customHeaders) {
            Object.keys(options.customHeaders).forEach((key) => {
                headers = headers.append(key, options.customHeaders[key]);
            });
        }
        return headers;
    }
    /**
     * @param {?} queueObj
     * @param {?} event
     * @return {?}
     */
    _uploadProgress(queueObj, event) {
        // update the FileQueueObject with the current progress
        const /** @type {?} */ progress = Math.round(100 * event.loaded / event.total);
        queueObj.progress = progress;
        queueObj.status = FileQueueStatus.Progress;
        // this._queue.next(this._files);
    }
    /**
     * @param {?} queueObj
     * @param {?} response
     * @return {?}
     */
    _uploadComplete(queueObj, response) {
        // update the FileQueueObject as completed
        queueObj.progress = 100;
        queueObj.status = FileQueueStatus.Success;
        queueObj.response = response;
        // this._queue.next(this._files);
        // this.onCompleteItem(queueObj, response.body);
    }
    /**
     * @param {?} queueObj
     * @param {?} response
     * @return {?}
     */
    _uploadFailed(queueObj, response) {
        // update the FileQueueObject as errored
        queueObj.progress = 0;
        queueObj.status = FileQueueStatus.Error;
        queueObj.response = response;
        // this._queue.next(this._files);
    }
    /**
     * @param {?} options
     * @return {?}
     */
    setDefaults(options) {
        options.withCredentials = options.withCredentials || false;
        options.httpMethod = options.httpMethod || 'POST';
        options.authTokenPrefix = options.authTokenPrefix || 'Bearer';
        options.fieldName = options.fieldName || 'file';
    }
}
ImageUploaderService.ɵfac = function ImageUploaderService_Factory(t) { return new (t || ImageUploaderService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient)); };
ImageUploaderService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ImageUploaderService, factory: ImageUploaderService.ɵfac, providedIn: 'root' });
/** @nocollapse */
ImageUploaderService.ctorParameters = () => [
    { type: HttpClient, },
];
/** @nocollapse */ ImageUploaderService.ngInjectableDef = defineInjectable({ factory: function ImageUploaderService_Factory() { return new ImageUploaderService(inject(HttpClient)); }, token: ImageUploaderService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ImageUploaderService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.HttpClient }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} url
 * @param {?} cb
 * @return {?}
 */
function createImage(url, cb) {
    const /** @type {?} */ image = new Image();
    image.onload = function () {
        cb(image);
    };
    image.src = url;
}
const /** @type {?} */ resizeAreaId = 'imageupload-resize-area';
/**
 * @return {?}
 */
function getResizeArea() {
    let /** @type {?} */ resizeArea = document.getElementById(resizeAreaId);
    if (!resizeArea) {
        resizeArea = document.createElement('canvas');
        resizeArea.id = resizeAreaId;
        resizeArea.style.display = 'none';
        document.body.appendChild(resizeArea);
    }
    return /** @type {?} */ (resizeArea);
}
/**
 * @param {?} origImage
 * @param {?=} __1
 * @return {?}
 */
function resizeImage(origImage, { resizeHeight, resizeWidth, resizeQuality = 0.7, resizeType = 'image/jpeg', resizeMode = 'fill' } = {}) {
    const /** @type {?} */ canvas = getResizeArea();
    let /** @type {?} */ height = origImage.height;
    let /** @type {?} */ width = origImage.width;
    let /** @type {?} */ offsetX = 0;
    let /** @type {?} */ offsetY = 0;
    if (resizeMode === 'fill') {
        // calculate the width and height, constraining the proportions
        if (width / height > resizeWidth / resizeHeight) {
            width = Math.round(height * resizeWidth / resizeHeight);
        }
        else {
            height = Math.round(width * resizeHeight / resizeWidth);
        }
        canvas.width = resizeWidth <= width ? resizeWidth : width;
        canvas.height = resizeHeight <= height ? resizeHeight : height;
        offsetX = origImage.width / 2 - width / 2;
        offsetY = origImage.height / 2 - height / 2;
        // draw image on canvas
        const /** @type {?} */ ctx = canvas.getContext('2d');
        ctx.drawImage(origImage, offsetX, offsetY, width, height, 0, 0, canvas.width, canvas.height);
    }
    else if (resizeMode === 'fit') {
        // calculate the width and height, constraining the proportions
        if (width > height) {
            if (width > resizeWidth) {
                height = Math.round(height *= resizeWidth / width);
                width = resizeWidth;
            }
        }
        else {
            if (height > resizeHeight) {
                width = Math.round(width *= resizeHeight / height);
                height = resizeHeight;
            }
        }
        canvas.width = width;
        canvas.height = height;
        // draw image on canvas
        const /** @type {?} */ ctx = canvas.getContext('2d');
        ctx.drawImage(origImage, 0, 0, width, height);
    }
    else {
        throw new Error('Unknown resizeMode: ' + resizeMode);
    }
    // get the data from canvas as 70% jpg (or specified type).
    return canvas.toDataURL(resizeType, resizeQuality);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {number} */
const Status = {
    NotSelected: 0,
    Selected: 1,
    Uploading: 2,
    Loading: 3,
    Loaded: 4,
    Error: 5,
};
Status[Status.NotSelected] = "NotSelected";
Status[Status.Selected] = "Selected";
Status[Status.Uploading] = "Uploading";
Status[Status.Loading] = "Loading";
Status[Status.Loaded] = "Loaded";
Status[Status.Error] = "Error";
class ImageUploaderComponent {
    /**
     * @param {?} renderer
     * @param {?} uploader
     * @param {?} changeDetector
     */
    constructor(renderer, uploader, changeDetector) {
        this.renderer = renderer;
        this.uploader = uploader;
        this.changeDetector = changeDetector;
        this.statusEnum = Status;
        this._status = Status.NotSelected;
        this.thumbnailWidth = 150;
        this.thumbnailHeight = 150;
        this.cropper = undefined;
        this.upload = new EventEmitter();
        this.statusChange = new EventEmitter();
        this.propagateChange = (_) => { };
    }
    /**
     * @return {?}
     */
    get imageThumbnail() {
        return this._imageThumbnail;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set imageThumbnail(value) {
        this._imageThumbnail = value;
        this.propagateChange(this._imageThumbnail);
        if (value !== undefined) {
            this.status = Status.Selected;
        }
        else {
            this.status = Status.NotSelected;
        }
    }
    /**
     * @return {?}
     */
    get errorMessage() {
        return this._errorMessage;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set errorMessage(value) {
        this._errorMessage = value;
        if (value) {
            this.status = Status.Error;
        }
        else {
            this.status = Status.NotSelected;
        }
    }
    /**
     * @return {?}
     */
    get status() {
        return this._status;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set status(value) {
        this._status = value;
        this.statusChange.emit(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value) {
            this.loadAndResize(value);
        }
        else {
            this._imageThumbnail = undefined;
            this.status = Status.NotSelected;
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    /**
     * @return {?}
     */
    registerOnTouched() { }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.options) {
            if (this.options.thumbnailWidth) {
                this.thumbnailWidth = this.options.thumbnailWidth;
            }
            if (this.options.thumbnailHeight) {
                this.thumbnailHeight = this.options.thumbnailHeight;
            }
            if (this.options.resizeOnLoad === undefined) {
                this.options.resizeOnLoad = true;
            }
            if (this.options.autoUpload === undefined) {
                this.options.autoUpload = true;
            }
            if (this.options.cropEnabled === undefined) {
                this.options.cropEnabled = false;
            }
            if (this.options.autoUpload && this.options.cropEnabled) {
                throw new Error('autoUpload and cropEnabled cannot be enabled simultaneously');
            }
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
        if (this.options && this.options.cropEnabled && this.imageElement && this.fileToUpload && !this.cropper) {
            this.cropper = new Cropper(this.imageElement.nativeElement, {
                viewMode: 1,
                aspectRatio: this.options.cropAspectRatio ? this.options.cropAspectRatio : null
            });
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.cropper) {
            this.cropper.destroy();
            this.cropper = null;
        }
    }
    /**
     * @param {?} url
     * @return {?}
     */
    loadAndResize(url) {
        this.status = Status.Loading;
        this.uploader.getFile(url, this.options).subscribe(file => {
            if (this.options.resizeOnLoad) {
                // thumbnail
                const /** @type {?} */ result = {
                    file: file,
                    url: URL.createObjectURL(file)
                };
                this.resize(result).then(r => {
                    this._imageThumbnail = r.resized.dataURL;
                    this.status = Status.Loaded;
                });
            }
            else {
                const /** @type {?} */ result = {
                    file: null,
                    url: null
                };
                this.fileToDataURL(file, result).then(r => {
                    this._imageThumbnail = r.dataURL;
                    this.status = Status.Loaded;
                });
            }
        }, error => {
            this.errorMessage = error || 'Error while getting an image';
        });
    }
    /**
     * @return {?}
     */
    onImageClicked() {
        this.renderer.invokeElementMethod(this.fileInputElement.nativeElement, 'click');
    }
    /**
     * @return {?}
     */
    onFileChanged() {
        const /** @type {?} */ file = this.fileInputElement.nativeElement.files[0];
        if (!file) {
            return;
        }
        this.validateAndUpload(file);
    }
    /**
     * @param {?} file
     * @return {?}
     */
    validateAndUpload(file) {
        this.propagateChange(null);
        if (this.options && this.options.allowedImageTypes) {
            if (!this.options.allowedImageTypes.some(allowedType => file.type === allowedType)) {
                this.errorMessage = 'Only these image types are allowed: ' + this.options.allowedImageTypes.join(', ');
                return;
            }
        }
        if (this.options && this.options.maxImageSize) {
            if (file.size > this.options.maxImageSize * 1024 * 1024) {
                this.errorMessage = `Image must not be larger than ${this.options.maxImageSize} MB`;
                return;
            }
        }
        this.fileToUpload = file;
        if (this.options && this.options.autoUpload) {
            this.uploadImage();
        }
        // thumbnail
        const /** @type {?} */ result = {
            file: file,
            url: URL.createObjectURL(file)
        };
        this.resize(result).then(r => {
            this._imageThumbnail = r.resized.dataURL;
            this.origImageWidth = r.width;
            this.orgiImageHeight = r.height;
            if (this.options && !this.options.autoUpload) {
                this.status = Status.Selected;
            }
        });
    }
    /**
     * @return {?}
     */
    uploadImage() {
        this.progress = 0;
        this.status = Status.Uploading;
        let /** @type {?} */ cropOptions;
        if (this.cropper) {
            const /** @type {?} */ scale = this.origImageWidth / this.cropper.getImageData().naturalWidth;
            const /** @type {?} */ cropData = this.cropper.getData();
            cropOptions = {
                x: Math.round(cropData.x * scale),
                y: Math.round(cropData.y * scale),
                width: Math.round(cropData.width * scale),
                height: Math.round(cropData.height * scale)
            };
        }
        // const queueObj = this.uploader.uploadFile(this.fileToUpload, this.options, cropOptions);
        // file progress
        this.uploader.uploadFile(this.fileToUpload, this.options, cropOptions).subscribe(file => {
            this.progress = file.progress;
            if (file.isError()) {
                if (file.response.status || file.response.statusText) {
                    this.errorMessage = `${file.response.status}: ${file.response.statusText}`;
                }
                else {
                    this.errorMessage = 'Error while uploading';
                }
                // on some upload errors change detection does not work, so we are forcing manually
                this.changeDetector.detectChanges();
            }
            if (!file.inProgress()) {
                // notify that value was changed only when image was uploaded and no error
                if (file.isSuccess()) {
                    this.propagateChange(this._imageThumbnail);
                    this.status = Status.Selected;
                    this.fileToUpload = undefined;
                }
                this.upload.emit(file);
            }
        });
    }
    /**
     * @return {?}
     */
    removeImage() {
        this.fileInputElement.nativeElement.value = null;
        this.imageThumbnail = undefined;
        if (this.cropper) {
            this.cropper.destroy();
            this.cropper = null;
        }
    }
    /**
     * @return {?}
     */
    dismissError() {
        this.errorMessage = undefined;
        this.removeImage();
    }
    /**
     * @param {?} e
     * @return {?}
     */
    drop(e) {
        e.preventDefault();
        e.stopPropagation();
        if (!e.dataTransfer || !e.dataTransfer.files.length) {
            return;
        }
        this.validateAndUpload(e.dataTransfer.files[0]);
        this.updateDragOverlayStyles(false);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    dragenter(e) {
        e.preventDefault();
        e.stopPropagation();
    }
    /**
     * @param {?} e
     * @return {?}
     */
    dragover(e) {
        e.preventDefault();
        e.stopPropagation();
        this.updateDragOverlayStyles(true);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    dragleave(e) {
        e.preventDefault();
        e.stopPropagation();
        this.updateDragOverlayStyles(false);
    }
    /**
     * @param {?} isDragOver
     * @return {?}
     */
    updateDragOverlayStyles(isDragOver) {
        // TODO: find a way that does not trigger dragleave when displaying overlay
        // if (isDragOver) {
        //  this.renderer.setElementStyle(this.dragOverlayElement.nativeElement, 'display', 'block');
        // } else {
        //  this.renderer.setElementStyle(this.dragOverlayElement.nativeElement, 'display', 'none');
        // }
    }
    /**
     * @param {?} result
     * @return {?}
     */
    resize(result) {
        const /** @type {?} */ resizeOptions = {
            resizeHeight: this.thumbnailHeight,
            resizeWidth: this.thumbnailWidth,
            resizeType: result.file.type,
            resizeMode: this.options.thumbnailResizeMode
        };
        return new Promise((resolve) => {
            createImage(result.url, image => {
                const /** @type {?} */ dataUrl = resizeImage(image, resizeOptions);
                result.width = image.width;
                result.height = image.height;
                result.resized = {
                    dataURL: dataUrl,
                    type: this.getType(dataUrl)
                };
                resolve(result);
            });
        });
    }
    /**
     * @param {?} dataUrl
     * @return {?}
     */
    getType(dataUrl) {
        return dataUrl.match(/:(.+\/.+;)/)[1];
    }
    /**
     * @param {?} file
     * @param {?} result
     * @return {?}
     */
    fileToDataURL(file, result) {
        return new Promise((resolve) => {
            const /** @type {?} */ reader = new FileReader();
            reader.onload = function (e) {
                result.dataURL = reader.result;
                resolve(result);
            };
            reader.readAsDataURL(file);
        });
    }
}
ImageUploaderComponent.ɵfac = function ImageUploaderComponent_Factory(t) { return new (t || ImageUploaderComponent)(ɵngcc0.ɵɵdirectiveInject(Renderer), ɵngcc0.ɵɵdirectiveInject(ImageUploaderService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
ImageUploaderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ImageUploaderComponent, selectors: [["ngx-image-uploader"]], viewQuery: function ImageUploaderComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
        ɵngcc0.ɵɵviewQuery(_c1, true);
        ɵngcc0.ɵɵviewQuery(_c2, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.imageElement = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.fileInputElement = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dragOverlayElement = _t.first);
    } }, hostVars: 4, hostBindings: function ImageUploaderComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("drop", function ImageUploaderComponent_drop_HostBindingHandler($event) { return ctx.drop($event); })("dragenter", function ImageUploaderComponent_dragenter_HostBindingHandler($event) { return ctx.dragenter($event); })("dragover", function ImageUploaderComponent_dragover_HostBindingHandler($event) { return ctx.dragover($event); })("dragleave", function ImageUploaderComponent_dragleave_HostBindingHandler($event) { return ctx.dragleave($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("width", ctx.thumbnailWidth + "px")("height", ctx.thumbnailHeight + "px");
    } }, inputs: { options: "options" }, outputs: { upload: "upload", statusChange: "statusChange" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => ImageUploaderComponent),
                multi: true
            }
        ])], decls: 12, vars: 8, consts: [[1, "image-container"], [1, "match-parent", 3, "ngSwitch"], ["class", "match-parent", 4, "ngSwitchCase"], ["class", "selected-status-wrapper match-parent", 4, "ngSwitchCase"], [4, "ngSwitchCase"], ["type", "file", 3, "change"], ["fileInput", ""], [1, "drag-overlay", 3, "hidden"], ["dragOverlay", ""], [1, "match-parent"], ["type", "button", 1, "add-image-btn", 3, "click"], [1, "plus"], [1, "selected-status-wrapper", "match-parent"], [3, "src"], ["imageElement", ""], ["type", "button", 1, "remove", 3, "click"], [3, "click"], [1, "progress-bar"], [1, "bar"], [1, "sk-fading-circle"], [1, "sk-circle1", "sk-circle"], [1, "sk-circle2", "sk-circle"], [1, "sk-circle3", "sk-circle"], [1, "sk-circle4", "sk-circle"], [1, "sk-circle5", "sk-circle"], [1, "sk-circle6", "sk-circle"], [1, "sk-circle7", "sk-circle"], [1, "sk-circle8", "sk-circle"], [1, "sk-circle9", "sk-circle"], [1, "sk-circle10", "sk-circle"], [1, "sk-circle11", "sk-circle"], [1, "sk-circle12", "sk-circle"], [1, "error"], [1, "error-message"]], template: function ImageUploaderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵtemplate(2, ImageUploaderComponent_div_2_Template, 9, 0, "div", 2);
        ɵngcc0.ɵɵtemplate(3, ImageUploaderComponent_div_3_Template, 5, 1, "div", 3);
        ɵngcc0.ɵɵtemplate(4, ImageUploaderComponent_div_4_Template, 5, 1, "div", 3);
        ɵngcc0.ɵɵtemplate(5, ImageUploaderComponent_div_5_Template, 4, 3, "div", 4);
        ɵngcc0.ɵɵtemplate(6, ImageUploaderComponent_div_6_Template, 14, 0, "div", 2);
        ɵngcc0.ɵɵtemplate(7, ImageUploaderComponent_div_7_Template, 7, 1, "div", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "input", 5, 6);
        ɵngcc0.ɵɵlistener("change", function ImageUploaderComponent_Template_input_change_8_listener($event) { return ctx.onFileChanged(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(10, "div", 7, 8);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitch", ctx.status);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", ctx.statusEnum.NotSelected);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", ctx.statusEnum.Loaded);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", ctx.statusEnum.Selected);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", ctx.statusEnum.Uploading);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", ctx.statusEnum.Loading);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", ctx.statusEnum.Error);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("hidden", true);
    } }, directives: [ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase], styles: ["[_nghost-%COMP%]{display:block}.match-parent[_ngcontent-%COMP%]{width:100%;height:100%}.add-image-btn[_ngcontent-%COMP%]{width:100%;height:100%;font-weight:700;opacity:.5;border:0}.add-image-btn[_ngcontent-%COMP%]:hover{opacity:.7;cursor:pointer;background-color:#ddd;box-shadow:inset 0 0 5px rgba(0,0,0,.3)}.add-image-btn[_ngcontent-%COMP%]   .plus[_ngcontent-%COMP%]{font-size:30px;font-weight:400;margin-bottom:5px;margin-top:5px}img[_ngcontent-%COMP%]{cursor:pointer;position:absolute;top:50%;left:50%;margin-right:-50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);max-width:100%}.image-container[_ngcontent-%COMP%]{width:100%;height:100%;position:relative;display:inline-block;background-color:#f1f1f1;box-shadow:inset 0 0 5px rgba(0,0,0,.2)}.remove[_ngcontent-%COMP%]{position:absolute;top:0;right:0;width:40px;height:40px;font-size:25px;text-align:center;opacity:.8;border:0;cursor:pointer}.selected-status-wrapper[_ngcontent-%COMP%] > .remove[_ngcontent-%COMP%]:hover{opacity:.7;background-color:#fff}.error[_ngcontent-%COMP%]   .remove[_ngcontent-%COMP%]{opacity:.5}.error[_ngcontent-%COMP%]   .remove[_ngcontent-%COMP%]:hover{opacity:.7}input[_ngcontent-%COMP%]{display:none}.error[_ngcontent-%COMP%]{width:100%;height:100%;border:1px solid #e3a5a2;color:#d2706b;background-color:#fbf1f0;position:relative;text-align:center;display:flex;align-items:center}.error-message[_ngcontent-%COMP%]{width:100%;line-height:18px}.progress-bar[_ngcontent-%COMP%]{position:absolute;bottom:10%;left:10%;width:80%;height:5px;background-color:grey;opacity:.9;overflow:hidden}.bar[_ngcontent-%COMP%]{position:absolute;height:100%;background-color:#a4c639}.drag-overlay[_ngcontent-%COMP%]{position:absolute;top:0;left:0;width:100%;height:100%;background-color:#ff0;opacity:.3}.sk-fading-circle[_ngcontent-%COMP%]{width:40px;height:40px;position:relative;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}.sk-fading-circle[_ngcontent-%COMP%]   .sk-circle[_ngcontent-%COMP%]{width:100%;height:100%;position:absolute;left:0;top:0}.sk-fading-circle[_ngcontent-%COMP%]   .sk-circle[_ngcontent-%COMP%]:before{content:'';display:block;margin:0 auto;width:15%;height:15%;background-color:#333;border-radius:100%;-webkit-animation:1.2s ease-in-out infinite both sk-circleFadeDelay;animation:1.2s ease-in-out infinite both sk-circleFadeDelay}.sk-fading-circle[_ngcontent-%COMP%]   .sk-circle2[_ngcontent-%COMP%]{-webkit-transform:rotate(30deg);transform:rotate(30deg)}.sk-fading-circle[_ngcontent-%COMP%]   .sk-circle3[_ngcontent-%COMP%]{-webkit-transform:rotate(60deg);transform:rotate(60deg)}.sk-fading-circle[_ngcontent-%COMP%]   .sk-circle4[_ngcontent-%COMP%]{-webkit-transform:rotate(90deg);transform:rotate(90deg)}.sk-fading-circle[_ngcontent-%COMP%]   .sk-circle5[_ngcontent-%COMP%]{-webkit-transform:rotate(120deg);transform:rotate(120deg)}.sk-fading-circle[_ngcontent-%COMP%]   .sk-circle6[_ngcontent-%COMP%]{-webkit-transform:rotate(150deg);transform:rotate(150deg)}.sk-fading-circle[_ngcontent-%COMP%]   .sk-circle7[_ngcontent-%COMP%]{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.sk-fading-circle[_ngcontent-%COMP%]   .sk-circle8[_ngcontent-%COMP%]{-webkit-transform:rotate(210deg);transform:rotate(210deg)}.sk-fading-circle[_ngcontent-%COMP%]   .sk-circle9[_ngcontent-%COMP%]{-webkit-transform:rotate(240deg);transform:rotate(240deg)}.sk-fading-circle[_ngcontent-%COMP%]   .sk-circle10[_ngcontent-%COMP%]{-webkit-transform:rotate(270deg);transform:rotate(270deg)}.sk-fading-circle[_ngcontent-%COMP%]   .sk-circle11[_ngcontent-%COMP%]{-webkit-transform:rotate(300deg);transform:rotate(300deg)}.sk-fading-circle[_ngcontent-%COMP%]   .sk-circle12[_ngcontent-%COMP%]{-webkit-transform:rotate(330deg);transform:rotate(330deg)}.sk-fading-circle[_ngcontent-%COMP%]   .sk-circle2[_ngcontent-%COMP%]:before{-webkit-animation-delay:-1.1s;animation-delay:-1.1s}.sk-fading-circle[_ngcontent-%COMP%]   .sk-circle3[_ngcontent-%COMP%]:before{-webkit-animation-delay:-1s;animation-delay:-1s}.sk-fading-circle[_ngcontent-%COMP%]   .sk-circle4[_ngcontent-%COMP%]:before{-webkit-animation-delay:-.9s;animation-delay:-.9s}.sk-fading-circle[_ngcontent-%COMP%]   .sk-circle5[_ngcontent-%COMP%]:before{-webkit-animation-delay:-.8s;animation-delay:-.8s}.sk-fading-circle[_ngcontent-%COMP%]   .sk-circle6[_ngcontent-%COMP%]:before{-webkit-animation-delay:-.7s;animation-delay:-.7s}.sk-fading-circle[_ngcontent-%COMP%]   .sk-circle7[_ngcontent-%COMP%]:before{-webkit-animation-delay:-.6s;animation-delay:-.6s}.sk-fading-circle[_ngcontent-%COMP%]   .sk-circle8[_ngcontent-%COMP%]:before{-webkit-animation-delay:-.5s;animation-delay:-.5s}.sk-fading-circle[_ngcontent-%COMP%]   .sk-circle9[_ngcontent-%COMP%]:before{-webkit-animation-delay:-.4s;animation-delay:-.4s}.sk-fading-circle[_ngcontent-%COMP%]   .sk-circle10[_ngcontent-%COMP%]:before{-webkit-animation-delay:-.3s;animation-delay:-.3s}.sk-fading-circle[_ngcontent-%COMP%]   .sk-circle11[_ngcontent-%COMP%]:before{-webkit-animation-delay:-.2s;animation-delay:-.2s}.sk-fading-circle[_ngcontent-%COMP%]   .sk-circle12[_ngcontent-%COMP%]:before{-webkit-animation-delay:-.1s;animation-delay:-.1s}@-webkit-keyframes sk-circleFadeDelay{0%,100%,39%{opacity:0}40%{opacity:1}}@keyframes sk-circleFadeDelay{0%,100%,39%{opacity:0}40%{opacity:1}}"] });
/** @nocollapse */
ImageUploaderComponent.ctorParameters = () => [
    { type: Renderer, },
    { type: ImageUploaderService, },
    { type: ChangeDetectorRef, },
];
ImageUploaderComponent.propDecorators = {
    "imageElement": [{ type: ViewChild, args: ['imageElement',] },],
    "fileInputElement": [{ type: ViewChild, args: ['fileInput',] },],
    "dragOverlayElement": [{ type: ViewChild, args: ['dragOverlay',] },],
    "options": [{ type: Input },],
    "upload": [{ type: Output },],
    "statusChange": [{ type: Output },],
    "drop": [{ type: HostListener, args: ['drop', ['$event'],] },],
    "dragenter": [{ type: HostListener, args: ['dragenter', ['$event'],] },],
    "dragover": [{ type: HostListener, args: ['dragover', ['$event'],] },],
    "dragleave": [{ type: HostListener, args: ['dragleave', ['$event'],] },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ImageUploaderComponent, [{
        type: Component,
        args: [{
                selector: 'ngx-image-uploader',
                template: `<div class="image-container">
  <div class="match-parent" [ngSwitch]="status">

    <div class="match-parent" *ngSwitchCase="statusEnum.NotSelected">
      <button type="button" class="add-image-btn" (click)="onImageClicked()">
          <div>
            <p class="plus">+</p>
            <p>Click here to add image</p>
            <p>Or drop image here</p>
          </div>
      </button>
    </div>

    <div class="selected-status-wrapper match-parent" *ngSwitchCase="statusEnum.Loaded">
      <img [src]="imageThumbnail" #imageElement>

      <button type="button" class="remove" (click)="removeImage()">×</button>
    </div>

    <div class="selected-status-wrapper match-parent" *ngSwitchCase="statusEnum.Selected">
      <img [src]="imageThumbnail" #imageElement>

      <button type="button" class="remove" (click)="removeImage()">×</button>
    </div>

    <div *ngSwitchCase="statusEnum.Uploading">
      <img [attr.src]="imageThumbnail ? imageThumbnail : null" (click)="onImageClicked()">

      <div class="progress-bar">
        <div class="bar" [style.width]="progress+'%'"></div>
      </div>
    </div>

    <div class="match-parent" *ngSwitchCase="statusEnum.Loading">
      <div class="sk-fading-circle">
        <div class="sk-circle1 sk-circle"></div>
        <div class="sk-circle2 sk-circle"></div>
        <div class="sk-circle3 sk-circle"></div>
        <div class="sk-circle4 sk-circle"></div>
        <div class="sk-circle5 sk-circle"></div>
        <div class="sk-circle6 sk-circle"></div>
        <div class="sk-circle7 sk-circle"></div>
        <div class="sk-circle8 sk-circle"></div>
        <div class="sk-circle9 sk-circle"></div>
        <div class="sk-circle10 sk-circle"></div>
        <div class="sk-circle11 sk-circle"></div>
        <div class="sk-circle12 sk-circle"></div>
      </div>
    </div>

    <div class="match-parent" *ngSwitchCase="statusEnum.Error">
      <div class="error">
        <div class="error-message">
          <p>{{errorMessage}}</p>
        </div>
        <button type="button" class="remove" (click)="dismissError()">×</button>
      </div>
    </div>
  </div>

  <input type="file" #fileInput (change)="onFileChanged()">
  <div class="drag-overlay" [hidden]="true" #dragOverlay></div>
</div>
`,
                styles: [`:host{display:block}.match-parent{width:100%;height:100%}.add-image-btn{width:100%;height:100%;font-weight:700;opacity:.5;border:0}.add-image-btn:hover{opacity:.7;cursor:pointer;background-color:#ddd;box-shadow:inset 0 0 5px rgba(0,0,0,.3)}.add-image-btn .plus{font-size:30px;font-weight:400;margin-bottom:5px;margin-top:5px}img{cursor:pointer;position:absolute;top:50%;left:50%;margin-right:-50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);max-width:100%}.image-container{width:100%;height:100%;position:relative;display:inline-block;background-color:#f1f1f1;box-shadow:inset 0 0 5px rgba(0,0,0,.2)}.remove{position:absolute;top:0;right:0;width:40px;height:40px;font-size:25px;text-align:center;opacity:.8;border:0;cursor:pointer}.selected-status-wrapper>.remove:hover{opacity:.7;background-color:#fff}.error .remove{opacity:.5}.error .remove:hover{opacity:.7}input{display:none}.error{width:100%;height:100%;border:1px solid #e3a5a2;color:#d2706b;background-color:#fbf1f0;position:relative;text-align:center;display:flex;align-items:center}.error-message{width:100%;line-height:18px}.progress-bar{position:absolute;bottom:10%;left:10%;width:80%;height:5px;background-color:grey;opacity:.9;overflow:hidden}.bar{position:absolute;height:100%;background-color:#a4c639}.drag-overlay{position:absolute;top:0;left:0;width:100%;height:100%;background-color:#ff0;opacity:.3}.sk-fading-circle{width:40px;height:40px;position:relative;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}.sk-fading-circle .sk-circle{width:100%;height:100%;position:absolute;left:0;top:0}.sk-fading-circle .sk-circle:before{content:'';display:block;margin:0 auto;width:15%;height:15%;background-color:#333;border-radius:100%;-webkit-animation:1.2s ease-in-out infinite both sk-circleFadeDelay;animation:1.2s ease-in-out infinite both sk-circleFadeDelay}.sk-fading-circle .sk-circle2{-webkit-transform:rotate(30deg);transform:rotate(30deg)}.sk-fading-circle .sk-circle3{-webkit-transform:rotate(60deg);transform:rotate(60deg)}.sk-fading-circle .sk-circle4{-webkit-transform:rotate(90deg);transform:rotate(90deg)}.sk-fading-circle .sk-circle5{-webkit-transform:rotate(120deg);transform:rotate(120deg)}.sk-fading-circle .sk-circle6{-webkit-transform:rotate(150deg);transform:rotate(150deg)}.sk-fading-circle .sk-circle7{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.sk-fading-circle .sk-circle8{-webkit-transform:rotate(210deg);transform:rotate(210deg)}.sk-fading-circle .sk-circle9{-webkit-transform:rotate(240deg);transform:rotate(240deg)}.sk-fading-circle .sk-circle10{-webkit-transform:rotate(270deg);transform:rotate(270deg)}.sk-fading-circle .sk-circle11{-webkit-transform:rotate(300deg);transform:rotate(300deg)}.sk-fading-circle .sk-circle12{-webkit-transform:rotate(330deg);transform:rotate(330deg)}.sk-fading-circle .sk-circle2:before{-webkit-animation-delay:-1.1s;animation-delay:-1.1s}.sk-fading-circle .sk-circle3:before{-webkit-animation-delay:-1s;animation-delay:-1s}.sk-fading-circle .sk-circle4:before{-webkit-animation-delay:-.9s;animation-delay:-.9s}.sk-fading-circle .sk-circle5:before{-webkit-animation-delay:-.8s;animation-delay:-.8s}.sk-fading-circle .sk-circle6:before{-webkit-animation-delay:-.7s;animation-delay:-.7s}.sk-fading-circle .sk-circle7:before{-webkit-animation-delay:-.6s;animation-delay:-.6s}.sk-fading-circle .sk-circle8:before{-webkit-animation-delay:-.5s;animation-delay:-.5s}.sk-fading-circle .sk-circle9:before{-webkit-animation-delay:-.4s;animation-delay:-.4s}.sk-fading-circle .sk-circle10:before{-webkit-animation-delay:-.3s;animation-delay:-.3s}.sk-fading-circle .sk-circle11:before{-webkit-animation-delay:-.2s;animation-delay:-.2s}.sk-fading-circle .sk-circle12:before{-webkit-animation-delay:-.1s;animation-delay:-.1s}@-webkit-keyframes sk-circleFadeDelay{0%,100%,39%{opacity:0}40%{opacity:1}}@keyframes sk-circleFadeDelay{0%,100%,39%{opacity:0}40%{opacity:1}}`],
                host: {
                    '[style.width]': 'thumbnailWidth + "px"',
                    '[style.height]': 'thumbnailHeight + "px"'
                },
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => ImageUploaderComponent),
                        multi: true
                    }
                ]
            }]
    }], function () { return [{ type: Renderer }, { type: ImageUploaderService }, { type: ɵngcc0.ChangeDetectorRef }]; }, { upload: [{
            type: Output
        }], statusChange: [{
            type: Output
        }], drop: [{
            type: HostListener,
            args: ['drop', ['$event']]
        }], dragenter: [{
            type: HostListener,
            args: ['dragenter', ['$event']]
        }], dragover: [{
            type: HostListener,
            args: ['dragover', ['$event']]
        }], dragleave: [{
            type: HostListener,
            args: ['dragleave', ['$event']]
        }], imageElement: [{
            type: ViewChild,
            args: ['imageElement']
        }], fileInputElement: [{
            type: ViewChild,
            args: ['fileInput']
        }], dragOverlayElement: [{
            type: ViewChild,
            args: ['dragOverlay']
        }], options: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ImageUploaderModule {
}
ImageUploaderModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ImageUploaderModule });
ImageUploaderModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ImageUploaderModule_Factory(t) { return new (t || ImageUploaderModule)(); }, imports: [[
            CommonModule,
            HttpClientModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ImageUploaderModule, { declarations: function () { return [ImageUploaderComponent]; }, imports: function () { return [CommonModule,
        HttpClientModule]; }, exports: function () { return [ImageUploaderComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ImageUploaderModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    HttpClientModule
                ],
                declarations: [ImageUploaderComponent],
                exports: [ImageUploaderComponent]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { ImageUploaderService, Status, ImageUploaderComponent, ImageUploaderModule, FileQueueObject };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,